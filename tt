#!/usr/bin/env bash
# set -u
# set -eo pipefail

# ========== Tootils ==========
#
# Tootils works as a dispatcher of *Operations* ($op), which are handled
# by their respective modules and visually presented to the user
# surrounded by text that displays the external command ran.
# This is handled by run-op() and print-batch-*().
#
# Functions starting with a capital letter are the entry point
# of the module with the same name.
#
# Function signature is expressed in the first group of lines
# at the top of the function.
#

declare op=$1
shift

declare HERE SYSTEM
#shellcheck disable=SC2034
declare -A conf
declare conf_dir
declare -A conf_file

# ===== Essential functions =====

erro() {
    echo "$C_RED!$C_RESET${*}" >&2
    return 1
}

fatal() {
    echo "$C_RED!$C_RESET${*}" >&2
    exit 1
}

fatal-assert() {
    erro "  Fatal Assertion Failure (bug):"
    fatal "    $*"
}

#shellcheck disable=SC1090
load-module() {
    local mod="$HERE/tootils_modules/tt_$1.sh"

    source "$mod" 2>/dev/null || fatal "Could not load module: $mod"
}

canonical-path() {
    local path=$1

    local old_path
    while true; do
        old_path=$path
        path=$(readlink -e -- "$path")
        (($?)) && return 1
        [[ $path == "$old_path" ]] && break
    done

    echo "$path"
}

# ========== Header ==========

# Tootils path
HERE=$(canonical-path "$0")
HERE=${HERE%/*} # dirname

# Include <stdlib.h>
load-module "lib"

# System recognition
if command -v cygpath &>/dev/null; then
    SYSTEM=win
else
    SYSTEM=lin
fi

# ========== Configuration Logic ==========

if [[ -z $XDG_CONFIG_HOME ]]; then
    XDG_CONFIG_HOME="$HOME/.config"
elif [[ $SYSTEM == 'win' ]]; then
    XDG_CONFIG_HOME=$(cygpath -u "$XDG_CONFIG_HOME")
fi

# if [[ -z $XDG_DATA_HOME ]]; then
#     XDG_DATA_HOME="$HOME/.local/state"
# elif [[ $SYSTEM == 'win' ]]; then
#     XDG_DATA_HOME=$(cygpath -u "$XDG_DATA_HOME")
# fi

conf_dir="$XDG_CONFIG_HOME/tootils"

if [[ ! -d $conf_dir ]]; then
    mkdir -p "$conf_dir"
    (($?)) && fatal "Could not create configuration directory: $conf_dir"
fi

# Add new configurations filenames here:
for x in tootils backup dotlinks; do
    conf_file[$x]="$conf_dir/$x.conf"
done

for x in "${!conf_file[@]}"; do
    if [[ ! -f ${conf_file[$x]} ]]; then
        cp "$HERE/tootils_conf_file_templates/$x.conf" "${conf_file[$x]}"
        (($?)) && fatal "Could not create configuration file: ${conf_file[$x]}"

        echo "Configuration file created: ${conf_file[$x]}"
        new_config_file_created=yes
    fi
done

if [[ -n $new_config_file_created ]]; then
    echo "Please set up your new configuration file(s) with your desired values."
    exit 0
fi

load-config "conf" "backup_root" "" < "${conf_file[tootils]}"

# ========== Main Body ==========

# Print the title
echo "  ${C_RED_B_BL}-Tootils-${C_RESET}"

# Main
case "$op" in
    bk|bkg|back|backg)
        load-module "backup"
        Backup "$op" "$@"
    ;;
    help)
        load-module "help"
        Help "$@"
    ;;
    "")
        # to be improved
        # this should and will print usage information instead of crying
        echo "usage:"
        echo "    'tt <subcommand> [arg]'"
        echo "usage and help under construction. yeesh!"
    ;;
    *)
        erro "Unknown Tootils command: $op"
    ;;
esac
exit $?
